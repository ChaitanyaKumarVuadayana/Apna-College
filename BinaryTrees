import java.util.LinkedList;
import java.util.Queue;

class Node {
    int data;
    Node left;
    Node right;
    Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class Tree {
    int idx = -1;
    public Node buildTree(int [] nodes) {
        idx++;
        if (nodes[idx] == -1) {
            return null;
        }
        Node node = new Node(nodes[idx]);
        node.left = buildTree(nodes);
        node.right = buildTree(nodes);
        return node;
    }

    public void preOrder(Node root) {
        if (root == null) {
            return;
        }
        System.out.print(root.data + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    public void inOrder(Node root) {
        if (root == null) {
            return;
        }
        preOrder(root.left);
        System.out.print(root.data + " ");
        preOrder(root.right);
    }

    public void postOrder(Node root) {
        if (root == null) {
            return;
        }
        preOrder(root.left);
        preOrder(root.right);
        System.out.print(root.data + " ");
    }

    public void nulllevelOrder(Node root) {
        if (root == null) {
            return;
        }

        Queue<Node> Q = new LinkedList<>();
        Q.add(root);
        Q.add(null);

        while (!Q.isEmpty()) {
            Node node = Q.remove();
            if (node == null) {
                System.out.println();
                if (Q.isEmpty()) {
                    break;
                } else {
                    Q.add(null);
                }
            } else {
                System.out.print(node.data + " ");
                if (node.left != null) {
                    Q.add(node.left);
                }
                if (node.right != null) {
                    Q.add(node.right);
                }
            }
        }
    }

    public void levelOrder(Node root) {
        if (root == null) {
            return;
        }

        Queue<Node> Q = new LinkedList<>();
        Q.add(root);

        while (!Q.isEmpty()) {
            Node node = Q.remove();

            System.out.print(node.data + " ");
            if (node.left != null) {
                Q.add(node.left);
            }
            if (node.right != null) {
                Q.add(node.right);
            }

        }
    }

    public int height(Node root) {
        if (root == null) {
            return 0;
        }
        int lh = height(root.left);
        int rh = height(root.right);
        int H = Math.max(lh, rh) + 1;
        return H;
    }
}

class BinaryTree {
    public static void main(String [] args) {
        int [] node = {1, 2, 4, -1, -1, 5, -1,-1, 3, -1, 6, -1, -1};
        Tree BT = new Tree();
        Node root = BT.buildTree(node);
        BT.nulllevelOrder(root);
    }
}
