import java.util.LinkedList;
import java.util.Queue;

class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class Tree {
    Node root = null;
    int idx = -1;
    // public Node buildTree(int [] nodes) {
    // idx++;
    // if (nodes[idx] == -1) {
    // return null;
    // }
    // Node node = new Node(nodes[idx]);
    // node.left = buildTree(nodes);
    // node.right = buildTree(nodes);
    // return node;
    // }

    public void nulllevelOrder(Node root) {
        if (root == null) {
            return;
        }
        Queue<Node> Q = new LinkedList<>();
        Q.add(root);
        Q.add(null);

        while (!Q.isEmpty()) {
            Node node = Q.remove();
            if (node == null) {
                System.out.println();
                if (Q.isEmpty()) {
                    break;
                } else {
                    Q.add(null);
                }
            } else {
                System.out.print(node.data + " ");
                if (node.left != null) {
                    Q.add(node.left);
                }
                if (node.right != null) {
                    Q.add(node.right);
                }
            }
        }
    }

    public void inOrder(Node root) {

    if (root == null) {
    return;
    }
    inOrder(root.left);
    System.out.print(root.data + " ");
    inOrder(root.right);
    }

    public int height(Node root) {
        if (root == null) {
            return 0;
        }
        int lh = height(root.left);
        int rh = height(root.right);
        int H = Math.max(lh, rh) + 1;
        return H;
    }

public boolean isSubtree(Node root, Node subRoot) {
        if (root == null) {
            return false;
        }

        if(root.data == subRoot.data) {
            if (isIdentical(root, subRoot)) {
                return true;
            }
        }

        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    }

    public boolean isIdentical(Node root, Node subRoot) {
        if (root == null && subRoot == null) {
            return true;
        }
        if (root == null || subRoot == null || root.data != subRoot.data) {
            return false;
        }

        if (!isIdentical(root.left, subRoot.left)) {
            return false;
        }
        if (!isIdentical(root.right, subRoot.right)) {
            return false;
        }
        return true;
    }
}

class SimpleBinaryTree {
    public static void main(String[] args) {
        // int [] node = {1, 2, 4, -1, -1, 5, -1,-1, 3, -1, 6, -1, -1};
        //Tree BT = new Tree();
        // Node root = BT.buildTree(node);
        //BT.root = new Node(1);
        //BT.root.left = new Node(2);
        //BT.root.right = new Node(3);
        //BT.root.left.left = new Node(4);
        //BT.root.right.left = new Node(5);
        //BT.root.right.right = new Node(6);
        //BT.root.right.right.right = new Node(7);
        //BT.root.right.right.right.right = new Node(8);
        //System.out.println(BT.height(BT.root));
        //BT.nulllevelOrder(BT.root);
        //BT.inOrder(BT.root);

        int [] nodes = {5,4,6,-1,-1,7,-1,-1,2,-1,9,-1,15,-1,-1};
        int [] subNodes = {4,6,-1,-1,7,-1,-1};
        BinaryTree BT = new BinaryTree();
        Node root = BT.buildTree(nodes);
        // System.out.println(BT.numberOfNodes(root));
        // System.out.println(BT.sumofNodes(root));
        // System.out.println(BT.treeheight(root));
        // System.out.println(BT.diameterTree(root));
        // BT.levelOrder(root);

        BinaryTree subBT = new BinaryTree();
        Node subRoot = subBT.buildTree(subNodes);

        System.out.println(BT.isSubtree(root, subRoot));
    }
}
