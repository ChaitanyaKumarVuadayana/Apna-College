import java.util.LinkedList;
import java.util.Queue;

class Node {
    int data;
    Node left;
    Node right;

    Node (int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BinaryTree {
    int idx = -1;

    Node buildTree(int [] nodes) {
        idx++;
        if (nodes[idx] == -1) {
            return null;
        }
        Node node = new Node(nodes[idx]);
        node.left = buildTree(nodes);
        node.right = buildTree(nodes);
        return node;
    }

    void preOrder(Node root) {
        if (root == null) {
            return;
        }
        System.out.print(root.data + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    void inOrder(Node root) {
        if (root == null) {
            return;
        }
        inOrder(root.left);
        System.out.print(root.data + " ");
        inOrder(root.right);
    }

    void postOrder(Node root) {
        if (root == null) {
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.data + " ");
    }

    void levelOrder (Node root) {
        if (root == null) {
            return;
        }
        Queue<Node> Q = new LinkedList<>();
        Q.add(root);

        while (!Q.isEmpty()) {
            Node node = Q.remove();
            System.out.print(node.data + " ");
            if (node.left != null) {
                Q.add(node.left);
            }
            if (node.right != null) {
                Q.add(node.right);
            }
        } 
    }

    void nulllevelOrder (Node root) {
        if (root == null) {
            return;
        }
        Queue<Node> Q = new LinkedList<>();
        Q.add(root);
        Q.add(null);

        while(!Q.isEmpty()) {
            Node node = Q.remove();
            if (node == null) {
                System.out.println();
                if (Q.isEmpty()) {
                    break;
                } else {
                    Q.add(null);
                }
            } else {
                System.out.print(node.data + " ");
                if (node.left != null) {
                    Q.add(node.left);
                }
                if (node.right != null) {
                    Q.add(node.right);
                }
            }
        }
    }

    int heightTree(Node root) {
        if (root == null) {
            return 0;
        }

        int lh = heightTree(root.left);
        int rh = heightTree(root.right);
        int height = Math.max(lh, rh) + 1;
        return height;
    }

    int noOfNodes(Node root) {
        if (root == null) {
            return 0;
        }
        int ln = noOfNodes(root.left);
        int rn = noOfNodes(root.right);
        int noNodes = ln + rn + 1;
        return noNodes;
    }

    int sumOfNodes (Node root) {
        if (root == null) {
            return 0;
        }
        int ls = sumOfNodes(root.left);
        int rs = sumOfNodes(root.right);
        int sum = ls + rs + root.data;
        return sum;
    }

    int diameterOfTree (Node root) {
        if (root == null) {
            return 0;
        }
        int lh = heightTree(root.left);
        int rh = heightTree(root.right);
        int ld = diameterOfTree(root.left);
        int rd = diameterOfTree(root.right);
        int diameter = lh + rh + 1;
        return Math.max(diameter, Math.max(ld, rd));
    }

    void Klevel(Node root, int level, int k) {
        if (root == null) {
            return;
        }
        if (level == k) {
            System.out.print(root.data + " ");
            return;
        }

        Klevel(root.left, level+1, k);
        Klevel(root.right, level+1, k);
    }
}

class Simple_Tree {
    public static void main(String [] args) {
        int[] nodes = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
        BinaryTree BT = new BinaryTree();
        Node root = BT.buildTree(nodes);
        // System.out.println(BT.diameterOfTree(root));
        BT.Klevel(root, 1, 3);
    }
}
//      1
//     / \
//    2   3
//   / \   \
//  4   5   6
