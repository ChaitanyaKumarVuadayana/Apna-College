import java.util.Stack;

class Solution {
    static class Queue {
        static int [] arr;
        static int size;
        static int rear;
        Queue(int n) {
            arr = new int[n];
            size = n;
            rear = -1;
        }

        public boolean isEmpty() {
            return rear == -1;            
        } 

        //enque
        public void enque(int data) {
            if (rear == size-1) {
                System.out.println("Overflow");
                return;
            } 
            rear++;
            arr[rear] = data;
        }

        //dequeue
        public int dequeue() {
            if (rear == -1) {
                System.out.println("Underflow");
                return -1;
            } else {
                int front = arr[0];
                for (int i=0; i<rear; i++) {
                    arr[i] = arr[i+1];
                }
                rear--;
                return front;
            }
        }

        //peek
        public static int peek() {
            if (rear == -1) {
                System.out.println("Empty queue");
                return -1;
            }
            return arr[0];
        }
    }
    public static void main(String [] args) {
        Queue Q = new Queue(3);
        Q.enque(1);
        Q.enque(2);
        Q.enque(3);
        Q.enque(4);

        while(!Q.isEmpty()) {
            System.out.print(Q.dequeue() + " ");
        }
    }
}
