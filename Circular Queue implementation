import java.util.Stack;

class Solution {
    static class Queue {
        static int [] arr;
        static int size;
        static int rear;
        static int front;
        Queue(int n) {
            arr = new int[n];
            size = n;
            rear = -1;
            front = -1;
        }

        public boolean isEmpty() {
            return rear == -1 && front == -1;            
        } 

        public static boolean isFull() {
            return (rear+1)%size == front;
        }
        //enque
        public void enque(int data) {
            if (isFull()) {
                System.out.println("Overflow");
                return;
            } 
            if (front == -1) {
                front = 0;
            }
            rear = (rear+1)%size;
            arr[rear] = data;
        }

        //dequeue
        public int dequeue() {
            if (isEmpty()) {
                System.out.println("Underflow");
                return -1;
            } else {
                int top = arr[front];
                if (front == rear) {
                    rear = front = -1;
                } else {
                    front = (front + 1) % size;
                }
                return top;
            }
        }

        //peek
        public static int peek() {
            if (rear == -1) {
                System.out.println("Empty queue");
                return -1;
            }
            return arr[0];
        }
    }
    public static void main(String [] args) {
        Queue Q = new Queue(3);
        Q.enque(1);
        Q.enque(2);
        Q.enque(3);

        while(!Q.isEmpty()) {
            System.out.print(Q.dequeue() + " ");
        }
    }
}
