// Using Stacks O(2n + n) = O(n)
import java.util.Stack;

class Solution {
    public static void main(String [] args ){
        int [] arr = {6,8,0,1,3};

        Stack<Integer> St = new Stack<>();
        int [] nxtGreater = new int[arr.length];

        for (int i=arr.length-1; i>=0; i--) {
            while (!St.isEmpty() && arr[i] >= arr[St.peek()])  {
                St.pop();
            }
            if (St.isEmpty()) {
                nxtGreater[i] = -1;
            } else {
                nxtGreater[i] = arr[St.peek()];
            }
            St.push(i);
        }

        System.out.print("Array: ");
        for (int i=0; i<nxtGreater.length; i++) {
            System.out.print(nxtGreater[i] + " ");
        }
    }
}

//Next Greater Right = Loop(Reverse) && arr[i] >= arr[St.peek()];
//Next Greater Left = Loop(Normal) && arr[i] >= arr[St.peek()];
//Next Smallest Right = Loop(Reverse) && arr[i] <= arr[St.peek()];
//Next Smallest Left = Loop(Normal) && arr[i] <= arr[St.peek()];

// Brute Force O(n^2)
class Solution {
    public static void main(String [] args ){
        int [] arr = {6,8,0,1,3};
        for (int i=0; i<arr.length; i++) {
            int max = -1;
            for (int j=i+1; j<arr.length; j++) {
                if (arr[j] > arr[i]) {
                    max = arr[j];
                    break;
                }
            }
            System.out.print(max + " ");
        }
    }
}
