import java.util.Stack;

class Solution {
    
    public static void main(String [] args) {
        int [] heights = {2,1,5,6,2,3};

        int [] nxtright = new int[heights.length];
        Stack<Integer> Str = new Stack<>();
        for (int i=nxtright.length-1; i>=0; i--) {
            while(!Str.isEmpty() && heights[i] <= heights[Str.peek()]) {
                Str.pop();
            }
            if (Str.isEmpty()) {
                nxtright[i] = heights.length;
            } else {
                nxtright[i] = Str.peek();
            }
            Str.push(i);
        }

        int[] nxtleft = new int[heights.length];
        Stack<Integer> Stl = new Stack<>();
        for (int i = 0; i < nxtleft.length; i++) {
            while (!Stl.isEmpty() && heights[i] <= heights[Stl.peek()]) {
                Stl.pop();
            }
            if (Stl.isEmpty()) {
                nxtleft[i] = -1;
            } else {
                nxtleft[i] = Stl.peek();
            }
            Stl.push(i);
        }

        int area = -1;
        for (int i = 0; i < heights.length; i++) {
            int a = heights[i] * (nxtright[i] - nxtleft[i] -1);
            area = Math.max(area, a);
        }
        System.out.println(area);
    }
}


// Ans: 10
